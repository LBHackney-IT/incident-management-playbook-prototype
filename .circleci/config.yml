version: 2.1

orbs:
    aws-s3: circleci/aws-s3@2.0.0
    aws-cli: circleci/aws-cli@2.0.0
    aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

references:
    workspace_root: &workspace_root '~'
    attach_workspace: &attach_workspace
        attach_workspace:
            at: *workspace_root

executors:
    node-executor:
        docker:
            - image: circleci/node:14.15.4-browsers
    docker-terraform:
        docker:
            - image: "hashicorp/terraform:light"
    docker-python:
        docker:
            - image: circleci/python:3.7

commands:
    assume-role-and-persist-workspace:
        description: "Assume deployment role and persist credentials across jobs"
        parameters:
            aws-account:
                type: string
        steps:
            - checkout
            - aws_assume_role/assume_role:
                  account: <<parameters.aws-account>>
                  profile_name: default
                  role: "LBH_Circle_CI_Deployment_Role"
            - persist_to_workspace:
                  root: *workspace_root
                  paths:
                      - .aws

    terraform-init-then-apply:
        description: "Initialize and apply the terraform configuration"
        parameters:
            environment:
                type: string
        steps:
            - *attach_workspace
            - checkout
            - run:
                  name: get and init
                  command: |
                      cd ./terraform/<<parameters.environment>>/
                      terraform get -update=true
                      terraform init
            - run:
                  name: apply
                  command: |
                      cd ./terraform/<<parameters.environment>>/
                      terraform apply -auto-approve
jobs:
    install-dependencies:
        executor: node-executor
        steps:
            - *attach_workspace
            - checkout
            - restore_cache:
                  key: dependency-cache-{{ checksum "yarn.lock" }}
            - run:
                  name: Install Dependencies
                  command: yarn --frozen-lockfile
            - save_cache:
                  key: dependency-cache-{{ checksum "yarn.lock" }}
                  paths:
                      - ./node_modules
            - persist_to_workspace:
                  root: *workspace_root
                  paths: .
    
    unit-tests:
        executor: node-executor
        steps:
            - *attach_workspace
            - run:
                name: Run tests
                command: yarn test --ci --reporters=default --reporters=jest-junit
            - store_test_results:
                path: .

    build-library:
        executor: node-executor
        steps:
            - *attach_workspace
            - run:
                name: Build library
                command: yarn build

    build-deploy-development:
        executor: node-executor
        environment:
            aws-region: eu-west-2
        parameters:
            stage:
                type: string
        steps:
            - *attach_workspace
            - aws-cli/install
            - run:
                name: Generate example site
                command: yarn demo
            - run:
                name: Build example site
                working_directory: ./example-service-docs
                command: yarn && yarn build
            - run:
                name: Deploy to S3
                command: aws s3 sync build s3://development-incident-management-playbooks-prototype

    assume-role-development:
        executor: docker-python
        steps:
            - assume-role-and-persist-workspace:
                  aws-account: $AWS_ACCOUNT_DEVELOPMENT

    terraform-init-and-apply-to-development:
        executor: docker-terraform
        steps:
            - terraform-init-then-apply:
                  environment: "development"
                  
workflows:
    version: 2
    continuous-delivery:
        jobs:
            - install-dependencies
            - unit-tests:
                requires:
                - install-dependencies
            - build-library:
                requires:
                - unit-tests
            - assume-role-development:
                context: api-assume-role-development-context
                requires:
                        - unit-tests
                    # filters:
                    #     branches:
                    #         only: main
            - terraform-init-and-apply-to-development:
                  requires:
                      - assume-role-development
                #   filters:
                #       branches:
                #           only: main
            - build-deploy-development:
                  stage: "development"
                  requires:
                      - terraform-init-and-apply-to-development
                #   filters:
                #       branches:
                #           only: main
            # filters:
            #     branches:
            #         only: main